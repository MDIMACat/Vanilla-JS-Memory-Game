/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/memory_game_script.js":
/*!***********************************!*\
  !*** ./src/memory_game_script.js ***!
  \***********************************/
/***/ ((module) => {

eval("const fixedValues = {\n  classes: {\n    card: \"cards\",\n    toggled: \"toggled\",\n    matched: \"matched\",\n    defaultImage: \"default-image\",\n    cardImage: \"card-image\",\n    levelCompleteButton: \".level-complete-buttons button\",\n    completeContainer: \".complete-container\",\n    resetButton: \".reset-level-button button\",\n    resetDiv: \".reset-level-button\",\n    gridSelector: \".grid-selector\",\n    gridSubmitButton: \"#grid-submit-button\",\n    rowsInput: \".grid-rows\",\n    colsInput: \".grid-columns\",\n    gameContainer: \".game-container\",\n    timer: \"#timer\",\n    time: \"#timer h3\",\n    timeComplete: \"#time-complete p\",\n    moves: \"#timer p\",\n    movesComplete: \"#moves-complete p\",\n  },\n  images: {\n    correct: \"./images/correct.png\",\n    fruits: [\n      { id: 1, image: \"./images/apple.png\", alt: \"Apple Image\" },\n      { id: 2, image: \"./images/banana.png\", alt: \"Banana Image\" },\n      { id: 3, image: \"./images/orange.png\", alt: \"Orange Image\" },\n      { id: 4, image: \"./images/peach.png\", alt: \"Peach Image\" },\n      { id: 5, image: \"./images/pineapple.png\", alt: \"Pineapple Image\" },\n      { id: 6, image: \"./images/watermelon.png\", alt: \"Watermelon Image\" },\n    ],\n  },\n};\n\nclass MemoryGame {\n  constructor() {\n    this.flippedCards = [];\n    this.totalCompleteCards = [];\n    this.domElements = {};\n    this.timer;\n    this.isFirstClick = false;\n    this.seconds = 0;\n    this.minutes = 0;\n    this.rows = 0;\n    this.cols = 0;\n    this.turn = 0;\n  }\n\n  initializeGame() {\n    this.initializedomElements();\n    this.setCards();\n    this.domElements.resetDiv.style.visibility = \"hidden\";\n    this.domElements.resetButton.disabled = true;\n  }\n\n  initializedomElements() {\n    this.domElements.cards = document.querySelectorAll(\n      `.${fixedValues.classes.card}`\n    );\n    this.domElements.restartButton = document.querySelector(\n      fixedValues.classes.levelCompleteButton\n    );\n    this.domElements.completeGame = document.querySelector(\n      fixedValues.classes.completeContainer\n    );\n    this.domElements.resetButton = document.querySelector(\n      fixedValues.classes.resetButton\n    );\n    this.domElements.resetDiv = document.querySelector(\n      fixedValues.classes.resetDiv\n    );\n    this.domElements.gridSelector = document.querySelector(\n      fixedValues.classes.gridSelector\n    );\n    this.domElements.gridRows = document.querySelector(\n      fixedValues.classes.rowsInput\n    );\n    this.domElements.gridCols = document.querySelector(\n      fixedValues.classes.colsInput\n    );\n    this.domElements.gridSubmit = document.querySelector(\n      fixedValues.classes.gridSubmitButton\n    );\n    this.domElements.gameContainer = document.querySelector(\n      fixedValues.classes.gameContainer\n    );\n    this.domElements.timer = document.querySelector(fixedValues.classes.timer);\n    this.domElements.time = document.querySelector(fixedValues.classes.time);\n    this.domElements.timeCompleted = document.querySelector(\n      fixedValues.classes.timeComplete\n    );\n    this.domElements.moves = document.querySelector(fixedValues.classes.moves);\n    this.domElements.movesComplete = document.querySelector(\n      fixedValues.classes.movesComplete\n    );\n  }\n\n  setCards() {\n    const imageArray = fixedValues.images.fruits;\n    const shuffledImages = this.shuffleCards(imageArray);\n    this.domElements.resetButton.disabled = true;\n    this.domElements.cards.forEach((card, index) => {\n      const cardImage = this.getCardImageElement(card);\n      cardImage.src = shuffledImages[index].image;\n      cardImage.alt = shuffledImages[index].alt;\n      cardImage.dataset.id = shuffledImages[index].id;\n\n      this.resetCard(card);\n      card.addEventListener(\"click\", this.handleCardClick.bind(this));\n    });\n    this.domElements.gridSubmit.addEventListener(\n      \"click\",\n      this.setGrid.bind(this)\n    );\n  }\n\n  resetCard(card) {\n    const defaultImage = this.getDefaultImageElement(card);\n    const fruitImage = this.getCardImageElement(card);\n\n    card.classList.remove(\n      fixedValues.classes.toggled,\n      fixedValues.classes.matched\n    );\n    defaultImage.style.display = \"flex\";\n    fruitImage.style.display = \"none\";\n  }\n\n  handleCardClick(event) {\n    const clickedCard = event.currentTarget;\n    if (\n      !clickedCard ||\n      clickedCard.classList.contains(fixedValues.classes.toggled) ||\n      this.flippedCards.length === 2\n    ) {\n      return;\n    }\n    this.turn += 1;\n    this.domElements.moves.textContent = `Moves: ${this.turn}`;\n    if (!this.isFirstClick) {\n      this.isFirstClick = true;\n      this.startTimer();\n      this.flipCard(clickedCard);\n      this.domElements.resetDiv.style.visibility = \"visible\";\n      this.domElements.gridSelector.style.display = \"none\";\n      this.domElements.resetButton.disabled = false;\n      this.domElements.resetButton.addEventListener(\n        \"click\",\n        this.resetGame.bind(this)\n      );\n\n      if (this.flippedCards.length === 2) {\n        this.checkForMatch();\n      }\n    } else {\n      this.flipCard(clickedCard);\n      this.domElements.resetDiv.style.visibility = \"visible\";\n      this.domElements.gridSelector.style.display = \"none\";\n      this.domElements.resetButton.disabled = false;\n      this.domElements.resetButton.addEventListener(\n        \"click\",\n        this.resetGame.bind(this)\n      );\n\n      if (this.flippedCards.length === 2) {\n        this.checkForMatch();\n      }\n    }\n  }\n\n  flipCard(card) {\n    const defaultImage = this.getDefaultImageElement(card);\n    const fruitImage = this.getCardImageElement(card);\n\n    defaultImage.style.display = \"none\";\n    fruitImage.style.display = \"flex\";\n    card.classList.add(fixedValues.classes.toggled);\n    this.flippedCards.push(card);\n  }\n\n  checkForMatch() {\n    const [firstCard, secondCard] = this.flippedCards;\n    const isMatch =\n      this.getCardImageElement(firstCard).dataset.id ===\n      this.getCardImageElement(secondCard).dataset.id;\n\n    isMatch\n      ? this.handleMatch(firstCard, secondCard)\n      : this.handleNoMatch(firstCard, secondCard);\n  }\n\n  handleMatch(firstCard, secondCard) {\n    setTimeout(() => {\n      this.totalCompleteCards.push(firstCard.dataset.id, secondCard.dataset.id);\n      this.markCardsAsMatched(firstCard, secondCard);\n      this.flippedCards = [];\n      if (this.totalCompleteCards.length === this.domElements.cards.length) {\n        this.showGameComplete();\n      }\n    }, 500);\n  }\n\n  handleNoMatch(firstCard, secondCard) {\n    setTimeout(() => {\n      this.flipBack(firstCard);\n      this.flipBack(secondCard);\n      this.flippedCards = [];\n    }, 1000);\n  }\n\n  markCardsAsMatched(firstCard, secondCard) {\n    [firstCard, secondCard].forEach((card) => {\n      card.classList.add(fixedValues.classes.matched);\n      card.onclick = null;\n      const cardImage = this.getCardImageElement(card);\n      cardImage.src = fixedValues.images.correct;\n    });\n  }\n\n  flipBack(card) {\n    const defaultImage = this.getDefaultImageElement(card);\n    const fruitImage = this.getCardImageElement(card);\n\n    defaultImage.style.display = \"flex\";\n    fruitImage.style.display = \"none\";\n    card.classList.remove(fixedValues.classes.toggled);\n  }\n\n  showGameComplete() {\n    this.domElements.completeGame.style.display = \"flex\";\n    this.domElements.resetDiv.style.visibility = \"hidden\";\n    const [minutes, seconds] = this.endTimer();\n    this.isFirstClick = false;\n    if (minutes) {\n      this.domElements.timeCompleted.textContent = `Time: ${String(\n        minutes\n      )} minute(s) and ${String(seconds)} second(s)`;\n      this.domElements.movesComplete.textContent = `Total Moves: ${this.turn}`;\n    } else {\n      this.domElements.timeCompleted.textContent = `Time: ${String(\n        seconds\n      )} second(s)`;\n      this.domElements.movesComplete.textContent = `Total Moves: ${this.turn}`;\n    }\n\n    this.domElements.restartButton.addEventListener(\n      \"click\",\n      this.resetGame.bind(this)\n    );\n  }\n\n  resetGame() {\n    this.flippedCards = [];\n    this.totalCompleteCards = [];\n    this.endTimer();\n    this.isFirstClick = false;\n    this.domElements.moves.textContent = `Moves: 0`;\n    this.turn = 0;\n    this.domElements.resetDiv.style.visibility = \"hidden\";\n    this.domElements.completeGame.style.display = \"none\";\n    this.domElements.gridSelector.style.display = \"flex\";\n    this.domElements.gridRows.value = \"\";\n    this.domElements.gridCols.value = \"\";\n\n    if (this.rows && this.cols) {\n      this.domElements.moves.textContent = `Moves: 0`;\n      this.turn = 0;\n      this.setGrid();\n    } else {\n      this.domElements.cards.forEach((card) => this.resetCard(card));\n      this.setCards();\n    }\n  }\n\n  getDefaultImageElement(card) {\n    return card.querySelector(`.${fixedValues.classes.defaultImage}`);\n  }\n\n  getCardImageElement(card) {\n    return card.querySelector(`.${fixedValues.classes.cardImage}`);\n  }\n\n  shuffleCards(array) {\n    const duplicatedArray = [...array, ...array];\n\n    for (let i = duplicatedArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [duplicatedArray[i], duplicatedArray[j]] = [\n        duplicatedArray[j],\n        duplicatedArray[i],\n      ];\n    }\n\n    return duplicatedArray;\n  }\n\n  showErrorMessage(message) {\n    let errorElement = document.querySelector(\"#error-message\");\n\n    if (!errorElement) {\n      errorElement = document.createElement(\"div\");\n      errorElement.id = \"error-message\";\n      errorElement.style.color = \"white\";\n      errorElement.style.fontSize = \"medium\";\n      errorElement.style.display = \"none\";\n      this.domElements.gridSelector.appendChild(errorElement);\n    }\n\n    const pTag = errorElement.querySelector(\"p\") || document.createElement(\"p\");\n    pTag.textContent = message;\n    errorElement.appendChild(pTag);\n    errorElement.style.display = \"block\";\n\n    setTimeout(() => {\n      errorElement.style.display = \"none\";\n    }, 4000);\n  }\n\n  gridValue() {\n    let inputRow = Number(this.domElements.gridRows.value);\n    let inputCols = Number(this.domElements.gridCols.value);\n    if (inputRow || inputCols) {\n      this.rows = inputRow;\n      this.cols = inputCols;\n    }\n  }\n\n  setGrid() {\n    this.gridValue();\n    if (this.rows < 1 || this.cols < 1 || !this.rows || !this.cols) {\n      this.showErrorMessage(\"Error: Please enter a value in both input places\");\n      return;\n    }\n\n    this.newGrid();\n  }\n\n  newGrid() {\n    const totalCards = this.rows * this.cols;\n    if (totalCards % 2 !== 0) {\n      this.showErrorMessage(\n        \"Error: Please enter values that result in an even number of cards.\"\n      );\n      return;\n    }\n\n    this.domElements.gameContainer.style.display = \"grid\";\n    this.domElements.gameContainer.style.gridTemplateRows = `repeat(${this.rows}, 1fr)`;\n    this.domElements.gameContainer.style.gridTemplateColumns = `repeat(${this.cols}, 1fr)`;\n    this.domElements.gameContainer.style.gap = \"10px\";\n\n    const currentCards = this.domElements.cards.length;\n\n    if (totalCards > currentCards) {\n      let cardsToAdd = totalCards - currentCards;\n      for (let i = 0; i < cardsToAdd; i++) {\n        let clonedCard =\n          this.domElements.cards[i % currentCards].cloneNode(true);\n        this.domElements.gameContainer.appendChild(clonedCard);\n      }\n    } else if (totalCards < currentCards) {\n      for (let i = currentCards - 1; i >= totalCards; i--) {\n        this.domElements.gameContainer.removeChild(this.domElements.cards[i]);\n      }\n    }\n\n    this.domElements.cards = document.querySelectorAll(\n      `.${fixedValues.classes.card}`\n    );\n\n    const newLength = totalCards / 2;\n    let shuffledImages = this.shuffleCards(\n      fixedValues.images.fruits.slice(0, newLength)\n    );\n\n    this.domElements.cards.forEach((card, index) => {\n      const cardImage = this.getCardImageElement(card);\n      cardImage.src = shuffledImages[index].image;\n      cardImage.alt = shuffledImages[index].alt;\n      cardImage.dataset.id = shuffledImages[index].id;\n\n      this.resetCard(card);\n      card.addEventListener(\"click\", this.handleCardClick.bind(this));\n    });\n\n    this.flippedCards = [];\n    this.totalCompleteCards = [];\n    this.domElements.resetButton.disabled = true;\n    this.domElements.resetDiv.style.visibility = \"hidden\";\n    this.domElements.gridSelector.style.display = \"flex\";\n    this.domElements.gridRows.value = \"\";\n    this.domElements.gridCols.value = \"\";\n    this.domElements.gridSubmit.addEventListener(\n      \"click\",\n      this.setGrid.bind(this)\n    );\n    this.domElements.resetButton.addEventListener(\n      \"click\",\n      this.resetGame.bind(this)\n    );\n  }\n\n  startTimer() {\n    let totalSecond = 0;\n\n    this.timer = setInterval(() => {\n      totalSecond++;\n\n      this.seconds = totalSecond % 60;\n      this.minutes = Math.floor(totalSecond / 60);\n\n      this.domElements.time.textContent = `Timer: ${String(\n        this.minutes\n      ).padStart(2, \"0\")}:${String(this.seconds).padStart(2, \"0\")}`;\n    }, 1000);\n  }\n\n  endTimer() {\n    clearInterval(this.timer);\n    this.domElements.time.textContent = \"Timer: 00:00\";\n    const finalMins = this.minutes;\n    const finalSecs = this.seconds;\n    return [finalMins, finalSecs];\n  }\n}\n\nif (typeof document !== \"undefined\") {\n  const memoryGame = new MemoryGame();\n  memoryGame.initializeGame();\n}\n\nmodule.exports = { MemoryGame, fixedValues };\n\n\n//# sourceURL=webpack://siduduzile-mdima-222-memory-game-in-vanilla-js-javascript/./src/memory_game_script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/memory_game_script.js");
/******/ 	
/******/ })()
;